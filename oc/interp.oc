
typedef signed char __int8_t;



typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;
typedef long long __int64_t;
typedef unsigned long long __uint64_t;

typedef long __darwin_intptr_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_ct_rune_t;





typedef union {
 char __mbstate8[128];
 long long _mbstateL;
} __mbstate_t;

typedef __mbstate_t __darwin_mbstate_t;


typedef long int __darwin_ptrdiff_t;







typedef long unsigned int __darwin_size_t;





typedef __builtin_va_list __darwin_va_list;





typedef int __darwin_wchar_t;




typedef __darwin_wchar_t __darwin_rune_t;


typedef int __darwin_wint_t;




typedef unsigned long __darwin_clock_t;
typedef __uint32_t __darwin_socklen_t;
typedef long __darwin_ssize_t;
typedef long __darwin_time_t;
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef __int32_t __darwin_dev_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;

typedef __darwin_ino64_t __darwin_ino_t;



typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __uint16_t __darwin_mode_t;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef __uint32_t __darwin_sigset_t;
typedef __int32_t __darwin_suseconds_t;
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef unsigned char __darwin_uuid_t[16];
typedef char __darwin_uuid_string_t[37];


struct __darwin_pthread_handler_rec {
 void (*__routine)(void *);
 void *__arg;
 struct __darwin_pthread_handler_rec *__next;
};

struct _opaque_pthread_attr_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_cond_t {
 long __sig;
 char __opaque[40];
};

struct _opaque_pthread_condattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_mutex_t {
 long __sig;
 char __opaque[56];
};

struct _opaque_pthread_mutexattr_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_once_t {
 long __sig;
 char __opaque[8];
};

struct _opaque_pthread_rwlock_t {
 long __sig;
 char __opaque[192];
};

struct _opaque_pthread_rwlockattr_t {
 long __sig;
 char __opaque[16];
};

struct _opaque_pthread_t {
 long __sig;
 struct __darwin_pthread_handler_rec *__cleanup_stack;
 char __opaque[8176];
};

typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
typedef unsigned long __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
typedef int __darwin_nl_item;
typedef int __darwin_wctrans_t;

typedef __uint32_t __darwin_wctype_t;



typedef __darwin_va_list va_list;
typedef __darwin_size_t size_t;

int renameat(int, const char *, int, const char *) __attribute__((availability(macosx,introduced=10.10)));

typedef __darwin_off_t fpos_t;
struct __sbuf {
 unsigned char *_base;
 int _size;
};


struct __sFILEX;
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read) (void *, char *, int);
 fpos_t (*_seek) (void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ub;
 struct __sFILEX *_extra;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;


extern FILE *__stdinp;
extern FILE *__stdoutp;
extern FILE *__stderrp;
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE * restrict, fpos_t *);
char *fgets(char * restrict, int, FILE *);



FILE *fopen(const char * restrict, const char * restrict) __asm("_" "fopen");

int fprintf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int fputc(int, FILE *);
int fputs(const char * restrict, FILE * restrict) __asm("_" "fputs") ;
size_t fread(void * restrict, size_t, size_t, FILE * restrict);
FILE *freopen(const char * restrict, const char * restrict,
                 FILE * restrict) __asm("_" "freopen") ;
int fscanf(FILE * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
int fseek(FILE *, long, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
size_t fwrite(const void * restrict, size_t, size_t, FILE * restrict) __asm("_" "fwrite") ;
int getc(FILE *);
int getchar(void);
char *gets(char *);
void perror(const char *);
int printf(const char * restrict, ...) __attribute__((__format__ (__printf__, 1, 2)));
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename (const char *, const char *);
void rewind(FILE *);
int scanf(const char * restrict, ...) __attribute__((__format__ (__scanf__, 1, 2)));
void setbuf(FILE * restrict, char * restrict);
int setvbuf(FILE * restrict, char * restrict, int, size_t);
int sprintf(char * restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
int sscanf(const char * restrict, const char * restrict, ...) __attribute__((__format__ (__scanf__, 2, 3)));
FILE *tmpfile(void);


__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tmpnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
int vprintf(const char * restrict, va_list) __attribute__((__format__ (__printf__, 1, 0)));
int vsprintf(char * restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
char *ctermid(char *);





FILE *fdopen(int, const char *) __asm("_" "fdopen");

int fileno(FILE *);
int pclose(FILE *);



FILE *popen(const char *, const char *) __asm("_" "popen");
int __srget(FILE *);
int __svfscanf(FILE *, const char *, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int __swbuf(int, FILE *);
inline __attribute__ ((__always_inline__)) int __sputc(int _c, FILE *_p) {
 if (--_p->_w >= 0 || (_p->_w >= _p->_lbfsize && (char)_c != '\n'))
  return (*_p->_p++ = _c);
 else
  return (__swbuf(_c, _p));
}
void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);
int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



int getw(FILE *);
int putw(int, FILE *);



__attribute__((deprecated("This function is provided for compatibility reasons only.  Due to security concerns inherent in the design of tempnam(3), it is highly recommended that you use mkstemp(3) instead.")))

char *tempnam(const char *, const char *) __asm("_" "tempnam") ;
typedef __darwin_off_t off_t;


int fseeko(FILE *, off_t, int);
off_t ftello(FILE *);





int snprintf(char * restrict, size_t, const char * restrict, ...) __attribute__((__format__ (__printf__, 3, 4)));
int vfscanf(FILE * restrict, const char * restrict, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
int vscanf(const char * restrict, va_list) __attribute__((__format__ (__scanf__, 1, 0)));
int vsnprintf(char * restrict, size_t, const char * restrict, va_list) __attribute__((__format__ (__printf__, 3, 0)));
int vsscanf(const char * restrict, const char * restrict, va_list) __attribute__((__format__ (__scanf__, 2, 0)));
typedef __darwin_ssize_t ssize_t;


int dprintf(int, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3))) __attribute__((availability(macosx,introduced=10.7)));
int vdprintf(int, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0))) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getdelim(char ** restrict, size_t * restrict, int, FILE * restrict) __attribute__((availability(macosx,introduced=10.7)));
ssize_t getline(char ** restrict, size_t * restrict, FILE * restrict) __attribute__((availability(macosx,introduced=10.7)));
extern const int sys_nerr;
extern const char *const sys_errlist[];

int asprintf(char ** restrict, const char * restrict, ...) __attribute__((__format__ (__printf__, 2, 3)));
char *ctermid_r(char *);
char *fgetln(FILE *, size_t *);
const char *fmtcheck(const char *, const char *);
int fpurge(FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char ** restrict, const char * restrict, va_list) __attribute__((__format__ (__printf__, 2, 0)));
FILE *zopen(const char *, const char *, int);





FILE *funopen(const void *,
                 int (*)(void *, char *, int),
                 int (*)(void *, const char *, int),
                 fpos_t (*)(void *, fpos_t, int),
                 int (*)(void *));
extern int __sprintf_chk (char * restrict, int, size_t,
     const char * restrict, ...);
extern int __snprintf_chk (char * restrict, size_t, int, size_t,
      const char * restrict, ...);







extern int __vsprintf_chk (char * restrict, int, size_t,
      const char * restrict, va_list);







extern int __vsnprintf_chk (char * restrict, size_t, int, size_t,
       const char * restrict, va_list);
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strerror(int) __asm("_" "strerror") ;
size_t strlen(const char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
char *strtok(char *, const char *);
size_t strxfrm(char *, const char *, size_t);
char *strtok_r(char *, const char *, char **);
int strerror_r(int, char *, size_t);
char *strdup(const char *);
void *memccpy(void *, const void *, int, size_t);
char *stpcpy(char *, const char *);
char *stpncpy(char *, const char *, size_t) __attribute__((availability(macosx,introduced=10.7)));
char *strndup(const char *, size_t) __attribute__((availability(macosx,introduced=10.7)));
size_t strnlen(const char *, size_t) __attribute__((availability(macosx,introduced=10.7)));
char *strsignal(int sig);







typedef __darwin_size_t rsize_t;
typedef int errno_t;


errno_t memset_s(void *, rsize_t, int, rsize_t) __attribute__((availability(macosx,introduced=10.9)));
void *memmem(const void *, size_t, const void *, size_t) __attribute__((availability(macosx,introduced=10.7)));
void memset_pattern4(void *, const void *, size_t) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern8(void *, const void *, size_t) __attribute__((availability(macosx,introduced=10.5)));
void memset_pattern16(void *, const void *, size_t) __attribute__((availability(macosx,introduced=10.5)));

char *strcasestr(const char *, const char *);
char *strnstr(const char *, const char *, size_t);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
void strmode(int, char *);
char *strsep(char **, const char *);


void swab(const void * restrict, void * restrict, ssize_t);








int bcmp(const void *, const void *, size_t) ;
void bcopy(const void *, void *, size_t) ;
void bzero(void *, size_t) ;
char *index(const char *, int) ;
char *rindex(const char *, int) ;


int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);





int ffsl(long) __attribute__((availability(macosx,introduced=10.5)));
int ffsll(long long) __attribute__((availability(macosx,introduced=10.9)));
int fls(int) __attribute__((availability(macosx,introduced=10.5)));
int flsl(long) __attribute__((availability(macosx,introduced=10.5)));
int flsll(long long) __attribute__((availability(macosx,introduced=10.9)));




int
eputchar(int c)
{
    return fputc(c, __stderrp);
}





int mem[(10000 +30000 +10000)];

int verbosef;
void
dumpcode(int from, int to)
{
    int n, opc, oopc, lit, ofrom;
    char buf[200], *p;

    while(from < to) {
 ofrom = from;
 __builtin___sprintf_chk (buf, 0, __builtin_object_size (buf, 2 > 1 ? 1 : 0), "%-4d:          ", from);
 p = buf + strlen(buf);
 oopc = opc = mem[from++] & 0xff;
 if (opc >= 32) {
     lit = opc%16;
     opc = opc-lit;
     if (lit == 7) {
  lit = (mem[from]&0xff) + (mem[from+1]&0xff)*256;
  from += 2;
     } else if (lit > 7) {
  lit = lit + (mem[from++]&0xff)*8 -1;
     }
 }
 switch(opc) {
 case 17: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "NOT"); break;
 case 18: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "NEG"); break;
 case 12: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "ADD"); break;
 case 13: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "SUB"); break;
 case 15: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "DIV"); break;
 case 14: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "MUL"); break;
 case 16: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "MOD"); break;
 case 6: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "EQ"); break;
 case 7: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "NE"); break;
 case 8: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "LT"); break;
 case 26: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "GT"); break;
 case 24: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "LE"); break;
 case 11: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "GE"); break;
 case 5: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "AND"); break;
 case 4: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "OR"); break;
 case 21: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "DUP"); break;
 case 19: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "POSTINC"); break;
 case 25: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "POSTDEC"); break;
 case 1: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "ASSIGN"); break;
 case 9: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "ASSIGNPOP"); break;
 case 10: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "RETURN"); break;
 case 22: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "POP"); break;
 case 23: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "DEREF"); break;
 case 208: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "JUMP %d", lit); break;
 case 224: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "JFALSE %d", lit); break;
 case 240: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "JTRUE %d", lit); break;
 case 64: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHAL %d", lit); break;
 case 80: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHL %d", lit); break;
 case 32: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHAA %d", lit); break;
 case 48: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHA %d", lit); break;
 case 96: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHAG %d", lit); break;
 case 112: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHG %d", lit); break;
 case 128: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHC %d", lit); break;
 case 192: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHAC %d", lit); break;
 case 144:
     __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "PUSHS %d \"", lit);
     n = lit;
     p += strlen(p);
     while(n--) *p++ = mem[from++] ? mem[from-1] : '' ;
     __builtin___strcpy_chk (p, "\"", __builtin_object_size (p, 2 > 1 ? 1 : 0));
     break;
 case 176: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "CALL %d", lit); break;
 case 160: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "ALLOC %d", lit); break;
 case 27: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "EXIT"); break;
 default: __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "unknown %d", oopc);
 }
 p = buf + 7;
 n = 0;
 while(ofrom < from && n < 3) {
     __builtin___sprintf_chk (p, 0, __builtin_object_size (p, 2 > 1 ? 1 : 0), "%02x", mem[ofrom++] & 0xff);
     p += 2;
     n++;
 }
 *p = ' ';
 fprintf(__stderrp, "%s\n", buf);
    }
}

int
main(int argc, char **argv)
{
    int *q, sp, fp, r, opc, lit, pc, codesize;
    int oldpc;

    verbosef = argc > 1;

    codesize = getchar();
    codesize = codesize + getchar()*256;
    pc = codesize;
    q = mem;

    while(pc--)
 *q++ = getchar();

    if (verbosef)
 fprintf(__stderrp, "code size %d\n", codesize);
    sp = (10000 +30000 +10000);
    pc = 0;

    while(1) {
 if (verbosef) {
     fprintf(__stderrp, "%5d %5d(%5d,%5d,%5d) ", fp, sp, mem[sp], mem[sp+1], mem[sp+2]);
     dumpcode(pc, pc+1);
 }
 oldpc = pc;
 switch (opc = mem[pc++]) {
 case 17: mem[sp] = ! mem[sp]; break;
 case 18: mem[sp] = - mem[sp]; break;
 case 12: r = mem[sp++]; mem[sp] = mem[sp] + r; break;
 case 13: r = mem[sp++]; mem[sp] = mem[sp] - r; break;
 case 14: r = mem[sp++]; mem[sp] = mem[sp] * r; break;
 case 15: r = mem[sp++]; mem[sp] = mem[sp] / r; break;
 case 16: r = mem[sp++]; mem[sp] = mem[sp] % r; break;
 case 5: r = mem[sp++]; mem[sp] = mem[sp] & r; break;
 case 4: r = mem[sp++]; mem[sp] = mem[sp] | r; break;
 case 26: r = mem[sp++]; mem[sp] = mem[sp] > r; break;
 case 11: r = mem[sp++]; mem[sp] = mem[sp] >= r; break;
        case 24: r = mem[sp++]; mem[sp] = mem[sp] <= r; break;
 case 6: r = mem[sp++]; mem[sp] = mem[sp] == r; break;
 case 7: r = mem[sp++]; mem[sp] = mem[sp] != r; break;
        case 8: r = mem[sp++]; mem[sp] = mem[sp] < r; break;
 case 1: r = mem[sp++]; mem[mem[sp]] = r; mem[sp] = r; break;
 case 9: r = mem[sp++]; mem[mem[sp]] = r; sp++; break;
 case 10: r = mem[sp]; sp = fp; pc = mem[sp-1]; fp = mem[sp-2]; lit = mem[sp-3]; sp = sp + lit/2;mem[sp] = r;if (lit%2) sp++; break;






 case 22: sp++; break;
 case 27: return mem[sp]; break;
 case 21: r = mem[sp]; sp--;mem[sp] = r; break;
 case 23: mem[sp] = mem[mem[sp]]; break;
 case 19: mem[sp] = mem[mem[sp]]++; break;
 case 25: mem[sp] = mem[mem[sp]]--; break;
        default:
 {
     lit = opc % 16;
     opc = opc / 16;
     if (lit == 7) {
  lit = mem[pc++];
  lit = lit+mem[pc++]*256;
     } else if (7 < lit)
  lit = lit + mem[pc++]*8 - 1;
     switch(opc) {
     case 2: sp--;mem[sp] = fp+lit; break;
     case 4: sp--;mem[sp] = fp-lit-3 -1; break;
     case 3: sp--;mem[sp] = mem[fp+lit]; break;
     case 5: sp--;mem[sp] = mem[fp-lit-3 -1]; break;
     case 6: sp--;mem[sp] = codesize+lit; break;
     case 7: sp--;mem[sp] = mem[codesize+lit]; break;
     case 12: sp--;mem[sp] = lit; break;
     case 8: sp--;mem[sp] = lit; break;
     case 9: sp--;mem[sp] = pc; pc = pc + lit; break;
     case 10: sp = sp - lit; break;
     case 11: r = mem[sp - -lit/2]; if (r < 4 +1) { switch(r) { case 0: r = getchar(); break; case 1: r = putchar(mem[sp]); break; case 2: r = eputchar(mem[sp]); break; case 3: exit(mem[sp]); break; } sp = sp + lit/2;mem[sp] = r;if (lit%2) sp++; } else { mem[sp - 1] = pc; mem[sp - 2] = fp; mem[sp - 3] = lit; fp = sp; sp = sp - 3 - 16; pc = r; }; break;
     case 13: pc = lit; break;
     case 15: if (mem[sp++]) pc = lit; break;
     case 14: if (!mem[sp++]) pc = lit; break;
     default: ;
     fprintf(__stderrp, "unimpl op %d at %d\n", mem[oldpc], oldpc);
     exit(1);
     }
 }
 }
    }
}
